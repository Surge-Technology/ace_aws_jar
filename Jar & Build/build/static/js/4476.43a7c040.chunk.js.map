{"version":3,"file":"static/js/4476.43a7c040.chunk.js","mappings":"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","sources":["views/dashboard/monthlyevents.js","views/dashboard/weeklybatch.js","views/dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Calendar from 'react-big-calendar';\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport Swal from 'sweetalert2';\nmoment.locale(\"en-GB\");\nCalendar.momentLocalizer(moment);\nexport const navigateContants = {\n  PREVIOUS: 'PREV',\n  NEXT: 'NEXT',\n  TODAY: 'TODAY',\n  DATE: 'DATE',\n};\nexport const views = {\n  MONTH: 'month',\n  WEEK: 'week',\n  WORK_WEEK: 'work_week',\n  DAY: 'Day',\n  AGENDA: 'agenda'\n};\nconst CustomToolbar = (props) => {\n  function navigate(action) {\n    props.onNavigate(action);\n  }\n  function viewItem(view) {\n    props.onViewChange(view);\n  }\n  function viewNamesGroup(messages) {\n    const viewNames = props.views;\n    const view = props.view;\n    if (viewNames.length > 1) {\n      return viewNames.map((name) => (\n        <button\n          type=\"button\"\n          key={name}\n          onClick={viewItem.bind(null, name)}>\n          {messages[name]}\n        </button>\n      ));\n    }\n  }\n  return (\n    <div className=\"rbc-toolbar\">\n      <span className=\"rbc-btn-group\">\n        <button type=\"button\" onClick={navigate.bind(null, navigateContants.PREVIOUS)}>\n          Prev\n        </button>\n        <button type=\"button\" onClick={navigate.bind(null, navigateContants.TODAY)}>\n          Today\n        </button>\n        <button type=\"button\" onClick={navigate.bind(null, navigateContants.NEXT)}>\n          Next\n        </button>\n      </span>\n      <span className=\"rbc-toolbar-label\">{props.label}</span>\n      <span className=\"rbc-btn-group\">{viewNamesGroup(props.messages)}</span>\n    </div>\n  );\n};\nconst Monthlyevents = (props) => {\n  const [time, setTime] = useState([]);\n  const [selected, setSelected] = useState();\n  const handleSelected = (event) => {\n    setSelected(event);\n    Swal.fire({\n      title: `<strong>${event.title}</strong>`,\n      html:\n        `<b>Start Date & Time:</b>\\n ${moment(event.start.toString()).format('MMMM Do YYYY, h:mm a')} <br/>\n      <b>End Date & Time:</b>\\n${moment(event.end.toString()).format('MMMM Do YYYY, h:mm a')}`,\n      customClass: {\n        title: 'title-class',\n        content: 'content-class',\n      }\n    })\n  };\n  useEffect(() => {\n    if (props.events) {\n      setTime(props.events)\n    }\n  }, [props.events, setTime]);\n  return (\n    <>\n      <Calendar\n         defaultView='month'\n        events={time}\n        views={['month', 'day']}\n        components={{\n          toolbar: CustomToolbar,\n        }}\n        onSelectEvent={handleSelected}\n      />\n    </>\n  )\n}\nexport default Monthlyevents;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport Calendar from 'react-big-calendar';\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport Swal from 'sweetalert2';\nmoment.locale(\"en-GB\");\nconst minTime = new Date();\nminTime.setHours(6, 0, 0);\nconst maxTime = new Date();\nmaxTime.setHours(23, 30, 0);\nconst localizer = Calendar.momentLocalizer(moment);\nlocalizer.segmentOffset = 0\nexport const navigateContants = {\n  PREVIOUS: 'PREV',\n  NEXT: 'NEXT',\n  TODAY: 'TODAY',\n  DATE: 'DATE'\n};\nconst CustomToolbar = (props) => {\n  function navigate(action) {\n    props.onNavigate(action);\n  }\n  function viewItem(view) {\n    props.onViewChange(view);\n  }\n  function viewNamesGroup(messages) {\n    const viewNames = props.views;\n    const view = props.view;\n    if (viewNames.length > 1) {\n      return viewNames.map((name) => (\n        <button\n          type=\"button\"\n          key={name}\n          onClick={viewItem.bind(null, name)}>\n          {messages[name]}\n        </button>\n      ));\n    }\n  }\n  return (\n    <div className=\"rbc-toolbar\">\n      <span className=\"rbc-btn-group\">\n        <button type=\"button\" onClick={navigate.bind(null, navigateContants.PREVIOUS)}>\n          Prev\n        </button>\n        <button type=\"button\" onClick={navigate.bind(null, navigateContants.TODAY)}>\n          Today\n        </button>\n        <button type=\"button\" onClick={navigate.bind(null, navigateContants.NEXT)}>\n          Next\n        </button>\n      </span>\n      {/* <span className=\"rbc-toolbar-label\">{props.label}</span> */}\n      <span className=\"rbc-btn-group\">{viewNamesGroup(props.messages)}</span>\n    </div>\n  );\n};\nconst Weeklybatches = (props) => {\n  const [time, setTime] = useState([]);\n  const [selected, setSelected] = useState();\n  const handleSelected = (event) => {\n    setSelected(event);\n    Swal.fire({\n      title: `<strong>${event.title}</strong>`,\n      html:\n        `<b>Start Date & Time:</b>\\n ${moment(event.start.toString()).format('MMMM Do YYYY, h:mm a')} <br/>\n      <b>End Date & Time:</b>\\n${moment(event.end.toString()).format('MMMM Do YYYY, h:mm a')}`,\n      customClass: {\n        title: 'title-class',\n        content: 'content-class',\n      }\n    })\n  };\n  const { views, ...otherProps } = useMemo(() => ({\n    views: {\n      week: true,\n    }\n  }), []);\n  useEffect(() => {\n    if (props.events) {\n      setTime(props.events)\n    }\n  }, [props.events, setTime]);\n  const allViews = Object.keys(Calendar.Views).map(\n    (k) => Calendar.Views[k]\n  );\n  return (\n    <>\n      <Calendar\n        defaultView='week'\n        localizer={localizer}\n        events={time}\n        views={['week', 'day']}\n        startAccessor={(start) => {\n          return start.start;\n        }}\n        endAccessor={({ start, end }) => {\n          const startMoment = new Date(start);\n          const endMoment = new Date(end);\n          if (startMoment.getDate() !== endMoment.getDate()) {\n            return new Date(end.getTime())\n          }\n          else {\n            return new Date(end.getTime())\n          }\n        }\n        }\n        allDaySlot={true}\n        allDayDefault={true}\n        selected={selected}\n        onSelectEvent={handleSelected}\n        showMultiDayTimes={true}\n        displayEventTime={true}\n        min={new Date(0, 0, 0, 6, 0, 0)}\n        max={new Date(0, 0, 0, 23, 30, 0)}\n        components={{\n          toolbar: CustomToolbar,\n        }}\n      />\n    </>\n  )\n}\nexport default Weeklybatches;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { Col, Card, CardHeader, CardBody, Row } from \"reactstrap\";\nimport Monthlyevents from './monthlyevents';\nimport Weeklybatches from './weeklybatch';\nimport Axios from \"../../hoc/axiosConfig\";\nimport { CChartPie,CChartBar,CChartLine,CChartPolarArea ,CChartDoughnut} from '@coreui/react-chartjs'\nimport Swal from 'sweetalert2'; \nimport axios from 'axios';\nconst dashboardState = {\n  \"totalStudents\"    : 0,\n  \"activeStudents\"   : 0,\n  \"newRegistrations\" : 0,\n  \"inactiveStudents\" : 0,\n  \"activeContracts\"  : 0,\n  \"inactiveContracts\": 0,\n  activeStudentCount : 0, currentMonthAttendance : 0, inactiveStudentCount: 0, sevenDayAttendance: 0,\n  permanentStaffCount: 0, temporaryStaffCount: 0, staffsevenDayAttendance: 0, staffcurrentMonthAttendance: 0, \n  testingActiveStudentCount: 0, eligibleTestCount: 0,approvedTestCount:0, chartData: \"\",\n  openLeads : 0,\n  openTrials : 0,\n  totalInquiries : 0,\n  totalContracts : 0,\n  totalRenewals : 0,\n  totalUpgrades : 0,\n  renewalPercentage : 0,\n  upgradePercentage : 0,\n} \nexport default function Dashboard() {\n  const [batchTimings, setBatchTimings] = useState([])\n  const [eventTimings, setEventTimings] = useState([])\n  const [dashboardIntialState, setState] = useState(dashboardState)\n  const {totalStudents,activeStudents,newRegistrations,inactiveStudents,activeContracts,inactiveContracts, activeStudentCount, currentMonthAttendance, inactiveStudentCount, sevenDayAttendance, permanentStaffCount\n    , temporaryStaffCount, staffsevenDayAttendance, staffcurrentMonthAttendance, testingActiveStudentCount, eligibleTestCount,approvedTestCount, chartData,\n    openLeads,openTrials,totalInquiries,totalContracts,totalRenewals,totalUpgrades,renewalPercentage,upgradePercentage} = dashboardIntialState\n  const random = () => Math.round(Math.random() * 100)\n  const navigate = useNavigate();\n  useEffect(() => {\n    if(!localStorage.getItem('reload')){\n      window.location.reload(false);\n      localStorage.setItem('reload',true)\n    }\n    getAllBatches();\n    getAllEvents();\n    axios.defaults.headers.common['Authorization'] =  \"Bearer \" + localStorage.getItem(\"token\");\n    axios.get(`${process.env.REACT_APP_BASE_URL}/dashboard/student`).then((res) => {\n        setState((prevState) => ({\n       ...prevState,\n       \"totalStudents\": res.data.totalStudents,\n       \"activeStudents\": res.data.activeStudents,\n       \"newRegistrations\": res.data.newRegistrations,\n       \"inactiveStudents\": res.data.inactiveStudents,\n       \"activeContracts\": res.data.activeContracts,\n       \"inactiveContracts\":res.data.inactiveContracts,\n     }))\n    }).catch(err => { console.log(err)})\n    axios.defaults.headers.common['Authorization'] =  \"Bearer \" + localStorage.getItem(\"token\");\n    axios.get(`${process.env.REACT_APP_BASE_URL}/student-attendances/count`).then((res) => {\n      setState((prevState) => ({\n        ...prevState,\n        activeStudentCount      : res.data.activeStudentCount,\n         currentMonthAttendance : res.data.currentMonthAttendance,\n        inactiveStudentCount    : res.data.inactiveStudentCount,\n         sevenDayAttendance     : res.data.sevenDayAttendance,\n      }))\n    }).catch(err => {  })\n     axios.defaults.headers.common['Authorization'] =  \"Bearer \" + localStorage.getItem(\"token\");\n    axios.get(`${process.env.REACT_APP_BASE_URL}/staff-attendances/count`).then((res) => {\n        setState((prevState) => ({\n        ...prevState,\n        permanentStaffCount  : res.data.permanentStaffCount,\n         temporaryStaffCount : res.data.temporaryStaffCount,\n        staffsevenDayAttendance     : res.data.sevenDayAttendance, \n        staffcurrentMonthAttendance : res.data.currentMonthAttendance,\n      }))\n    }).catch(err => {  })\n    axios.defaults.headers.common['Authorization'] =  \"Bearer \" + localStorage.getItem(\"token\");\n    axios.get(`${process.env.REACT_APP_BASE_URL}/level-testing/count`).then((res) => {\n       setState((prevState) => ({\n        ...prevState,\n        testingActiveStudentCount : res.data.activeStudentCount,\n         eligibleTestCount : res.data.eligibleTestCount,\n         approvedTestCount : res.data.approvedTestCount,\n      }))\n    }).catch(err => { })\n    axios.defaults.headers.common['Authorization'] =  \"Bearer \" + localStorage.getItem(\"token\");\n    axios.get(`${process.env.REACT_APP_BASE_URL}/dashboard/all-inquiry`).then((res) => { \n       setState((prevState) => ({\n       ...prevState,\n        openLeads: res.data.openLeads,\n        openTrials: res.data.openTrials,\n        totalInquiries: res.data.totalInquiries,\n     }))\n    }).catch(err => {\n      if (err.response.status === 401) {\n        Swal.fire('401 session expired..!', 'Please re-login');\n      }\n    })\n    axios.defaults.headers.common['Authorization'] =  \"Bearer \" + localStorage.getItem(\"token\");\n    axios.get(`${process.env.REACT_APP_BASE_URL}/dashboard/all-contract`).then((res) => {  \n      setState((prevState) => ({\n       ...prevState,\n       totalContracts : res.data.totalContracts,\n        totalRenewals : res.data.totalRenewals,\n        totalUpgrades : res.data.totalUpgrades,\n       renewalPercentage : res.data.renewalPercentage,\n       upgradePercentage : res.data.upgradePercentage,\n     }))\n    }).catch(err => { })\n  }, [])\n  const getAllBatches = () => {\n    axios.defaults.headers.common['Authorization'] =  \"Bearer \" + localStorage.getItem(\"token\");\n    axios.get(`${process.env.REACT_APP_BASE_URL}/batches`).then((n) => {  \n         let batchArray = [];\n        n.data.content.map((event, i) => {\n          let startDate = event.startDate.split(\"-\");\n          let startTime = event.startTime.split(':');\n          let startDateAndTime = new Date(event.startDate);\n          let startDateAndTime2 = new Date(event.startDate);\n          startDateAndTime.setHours(startTime[0]);\n          startDateAndTime.setMinutes(startTime[1]);\n          startDateAndTime.setSeconds(startTime[2]);\n          let endDate = event.endDate.split(\"-\");\n          let endTime = event.endTime.split(':');\n          let endDateAndTime = new Date(event.endDate);\n          let endDateAndTime2 = new Date(event.endDate);\n          endDateAndTime.setHours(endTime[0]);\n          endDateAndTime.setMinutes(endTime[1]);\n          endDateAndTime.setSeconds(endTime[2]);\n          if (startDateAndTime2 < endDateAndTime2) {\n            let startingPoint = new Date(startDateAndTime.getFullYear(), startDateAndTime.getMonth(), startDateAndTime.getDate());\n            let endingPoint = new Date(endDateAndTime.getFullYear(), endDateAndTime.getMonth(), endDateAndTime.getDate());\n            while (new Date(startingPoint) < new Date(endingPoint)) {\n              let estartDateAndTime = new Date(startingPoint);\n              estartDateAndTime.setHours(startTime[0]);\n              estartDateAndTime.setMinutes(startTime[1]);\n              estartDateAndTime.setSeconds(startTime[2]);\n              let sendDateAndTime = new Date(startingPoint);\n              sendDateAndTime.setHours(endTime[0]);\n              sendDateAndTime.setMinutes(endTime[1]);\n              sendDateAndTime.setSeconds(endTime[2]);\n              startingPoint.setDate(startingPoint.getDate() + 1);\n              batchArray.push({\n                'title' : event.name,\n                'start' : estartDateAndTime,\n                'end'   : sendDateAndTime,\n              })\n            }\n          }\n          else {\n            batchArray.push({\n              'title' : event.name,\n              'start' : startDateAndTime,\n              'end'   : endDateAndTime,\n            })\n          }\n        })\n        setTimeout(() => {\n          setBatchTimings(batchArray);\n        }, 1500);\n      })\n  }\n  const getAllEvents = () => {\n    axios.defaults.headers.common['Authorization'] =  \"Bearer \" + localStorage.getItem(\"token\");\n    axios.get(`${process.env.REACT_APP_BASE_URL}/event`).then((n) => {  \n     // console.log(\"n\",n)\n         let eventArray = [];\n        n.data.content.map((event, i) => {\n          if (event.isAllDay == true) {\n            let startDate = event.allDayEvent.eventDate.split(\"-\");\n            let startTime = event.allDayEvent.startTime.split(':');\n            let startDateAndTime = new Date(event.allDayEvent.eventDate);\n            startDateAndTime.setHours(startTime[0]);\n            startDateAndTime.setMinutes(startTime[1]);\n            startDateAndTime.setSeconds(startTime[2]);\n            let endDate = event.allDayEvent.eventDate.split(\"-\");\n            let endTime = event.allDayEvent.endTime.split(':');\n            let endDateAndTime = new Date(event.allDayEvent.eventDate);\n            endDateAndTime.setHours(endTime[0]);\n            endDateAndTime.setMinutes(endTime[1]);\n            endDateAndTime.setSeconds(endTime[2]);\n            eventArray.push({\n              'title' : event.name,\n              'start' : startDateAndTime,\n              'end'   : endDateAndTime\n            })\n          }\n          if (event.isCustomRange == true) {\n            event.customRangeEvent.map((e, i) => {\n              let startDate = e.eventDate.split(\"-\");\n              let startTime = e.startTime.split(':');\n              let startDateAndTime = new Date(e.eventDate);\n              startDateAndTime.setHours(startTime[0]);\n              startDateAndTime.setMinutes(startTime[1]);\n              startDateAndTime.setSeconds(startTime[2]);\n              let endDate = e.eventDate.split(\"-\");\n              let endTime = e.endTime.split(':');\n              let endDateAndTime = new Date(e.eventDate);\n              endDateAndTime.setHours(endTime[0]);\n              endDateAndTime.setMinutes(endTime[1]);\n              endDateAndTime.setSeconds(endTime[2]);\n              eventArray.push({\n                'title' : event.name,\n                'start' : startDateAndTime,\n                'end'   : endDateAndTime\n              })\n            })\n          }\n        })\n        setTimeout(() => {\n          setEventTimings(eventArray);\n        }, 1000);\n      })\n  }\n  return (\n    <>\n     <Row>\n        <Col md={4} >\n          <div >\n          <Card  >\n            <CardHeader>\n              <span className=\"dashheader\">Testing Eligibility and Readiness</span>\n              <i className=\"fa fa-arrow-circle-right dashicon\" aria-hidden=\"true\" onClick={() => navigate(\"/dashboard/TestingEligibilityList\")} ></i>\n            </CardHeader>\n            <CardBody className='cardbg'>\n                  <div  >  \n                  <CChartPie\n                  style={{cursor:\"pointer\"}}\n                    data={{\n                      labels: [ `Active Student Count : ${testingActiveStudentCount}`,`Eligible Test Count : ${eligibleTestCount}`, `Approved Test Count : ${approvedTestCount}`],\n                      datasets: [\n                        {\n                          data: [testingActiveStudentCount,eligibleTestCount,approvedTestCount],\n                          backgroundColor: ['#FF6384', '#36A2EB','#FFCE56'],\n                          hoverBackgroundColor: ['#FF6384', '#36A2EB','#FFCE56'],\n                        },\n                      ],\n                    }}\n                  />\n                </div> \n            </CardBody>\n          </Card>\n          </div>\n        </Col>\n        <Col md={4}>\n          <Card >\n            <CardHeader>\n              <span className=\"dashheader\">Contract Details</span>\n              <i className=\"fa fa-arrow-circle-right dashicon\" aria-hidden=\"true\" onClick={() => navigate(\"/dashboard/ContractDetailsList\")} ></i>\n            </CardHeader>\n            <CardBody className='cardbg'>\n                <div  > \n                 <CChartPolarArea\n                 style={{cursor:\"pointer\"}}\n                  data={{\n                    labels: ['Total Contracts : '+totalContracts, 'Total Renewals : '+totalRenewals, 'Total Upgrades : '+totalUpgrades,'Renewal Percentage : '+renewalPercentage,'Upgrade Percentage : '+upgradePercentage],\n                    datasets: [\n                      {\n                        data: [totalContracts, totalRenewals, totalUpgrades,renewalPercentage,upgradePercentage],\n                        backgroundColor: ['#FF6384', '#4BC0C0', '#FFCE56', '#E7E9ED', '#36A2EB'],\n                      },\n                    ],\n                  }}\n                />\n              </div> \n            </CardBody>\n          </Card>\n        </Col>\n        <Col md={4}>\n          <Card >\n            <CardHeader>\n              <span className=\"dashheader\">Inquiry Details</span>\n              <i className=\"fa fa-arrow-circle-right dashicon\" aria-hidden=\"true\" onClick={() => navigate(\"/dashboard/InquiryDetailsList\")} ></i>\n            </CardHeader>\n            <CardBody className='cardbg'>\n                <div >  \n                 <CChartDoughnut\n                 style={{cursor:\"pointer\"}}\n                      data={{\n                        labels: ['Total Inquiries : '+totalInquiries, 'Open Leads : '+openLeads, 'Open Trials : '+openTrials],\n                        datasets: [\n                          {\n                            backgroundColor: ['#41B883', '#E46651', '#00D8FF'],\n                            data: [totalInquiries, openLeads, openTrials],\n                          },\n                        ],\n                      }}\n                    />\n                </div> \n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={6}>\n          <Card>\n            <CardHeader>\n              <span className=\"dashheader\">Student Statistics</span>\n              {/* <i className=\"fa fa-arrow-circle-right dashicon\" aria-hidden=\"true\" onClick={() => navigate(\"/studentTabs/2\")} ></i> */}\n            </CardHeader>\n            <CardBody className='cardbg scrl' >\n             <CChartBar\n              data={{\n                labels: ['Total Students', 'Active Students', 'New Registrations', 'Inactive Students','Active Contracts','Inactive Contracts'],\n                datasets: [\n                  {\n                     label: 'Statistics',\n                    backgroundColor: ['#FF6384', '#4BC0C0', '#FFCE56', '#E7E9ED', '#36A2EB','#41B883'],\n                    hoverBackgroundColor: '#f68713',\n                    data: [totalStudents, activeStudents, newRegistrations, inactiveStudents,activeContracts,inactiveContracts],\n                  },\n                ],\n              }}\n              labels=\"Student\"\n            /> \n             </CardBody>\n          </Card>\n        </Col>\n        <Col md={6}>\n        <Card >\n            <CardHeader>\n              <span className=\"dashheader\">Student & Staff Attendance</span>\n              <i className=\"fa fa-arrow-circle-right dashicon\" aria-hidden=\"true\" onClick={() => { navigate('/dashboard/StudentANDstaffAttendenceTab') }}></i>\n            </CardHeader>\n            <CardBody className='cardbg scrl'>\n            <CChartLine\n              data={{\n                labels: ['Active Count', 'Inactive Count', 'Seven Days', 'Current Month', 'Temporary Staff'],\n                datasets: [\n                  {\n                    label: 'Student Attendance',\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\n                    borderColor: 'rgba(220, 220, 220, 1)',\n                    pointBackgroundColor: 'rgba(220, 220, 220, 1)',\n                    pointBorderColor: '#fff',\n                    data: [  activeStudentCount,  inactiveStudentCount, sevenDayAttendance,currentMonthAttendance,0],\n                  },\n                  {\n                    label: 'Staff Attendance',\n                    backgroundColor: 'rgba(151, 187, 205, 0.2)',\n                    borderColor: 'rgba(151, 187, 205, 1)',\n                    pointBackgroundColor: 'rgba(151, 187, 205, 1)',\n                    pointBorderColor: '#fff',\n                    data: [ permanentStaffCount, 0, staffsevenDayAttendance, staffcurrentMonthAttendance,temporaryStaffCount ],\n                  },\n                ],\n              }}\n            />\n            </CardBody>\n          </Card>\n          \n        </Col>\n      </Row>\n      <Row>\n        <Col md={6}>\n          <Card >\n            <CardHeader>\n              <span className=\"dashheader\">Weekly batch/class Schedule</span>\n            </CardHeader>\n            <CardBody className='cardbg scrl' >\n              <div style={{ height: 290, overflowY: \"scroll\" }}>\n                <Weeklybatches events={batchTimings} />\n              </div>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col md={6}>\n          <Card>\n            <CardHeader>\n              <span className=\"dashheader\">Monthly on-going Event Schedule</span>\n            </CardHeader>\n            <CardBody className='cardbg scrl'>\n                <Monthlyevents events={eventTimings} /> \n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  )\n}\n"],"names":["moment","Calendar","navigateContants","CustomToolbar","props","navigate","action","onNavigate","viewItem","view","onViewChange","_jsxs","className","children","_jsx","type","onClick","bind","label","messages","viewNames","views","length","map","name","viewNamesGroup","_useState","useState","_useState2","_slicedToArray","time","setTime","_useState3","_useState4","setSelected","useEffect","events","_Fragment","defaultView","components","toolbar","onSelectEvent","event","Swal","title","concat","html","start","toString","format","end","customClass","content","Date","setHours","localizer","segmentOffset","selected","_useMemo","useMemo","week","_objectWithoutProperties","_excluded","Object","keys","k","startAccessor","endAccessor","_ref","startMoment","endMoment","getDate","getTime","allDaySlot","allDayDefault","showMultiDayTimes","displayEventTime","min","max","dashboardState","activeStudentCount","currentMonthAttendance","inactiveStudentCount","sevenDayAttendance","permanentStaffCount","temporaryStaffCount","staffsevenDayAttendance","staffcurrentMonthAttendance","testingActiveStudentCount","eligibleTestCount","approvedTestCount","chartData","openLeads","openTrials","totalInquiries","totalContracts","totalRenewals","totalUpgrades","renewalPercentage","upgradePercentage","Dashboard","batchTimings","setBatchTimings","eventTimings","setEventTimings","_useState5","_useState6","dashboardIntialState","setState","totalStudents","activeStudents","newRegistrations","inactiveStudents","activeContracts","inactiveContracts","useNavigate","localStorage","getItem","window","location","reload","setItem","getAllBatches","getAllEvents","axios","process","then","res","prevState","_objectSpread","data","catch","err","console","log","response","status","n","batchArray","i","startDate","split","startTime","startDateAndTime","startDateAndTime2","setMinutes","setSeconds","endDate","endTime","endDateAndTime","endDateAndTime2","startingPoint","getFullYear","getMonth","endingPoint","estartDateAndTime","sendDateAndTime","setDate","push","setTimeout","eventArray","isAllDay","allDayEvent","eventDate","isCustomRange","customRangeEvent","e","Row","Col","md","Card","CardHeader","CardBody","CChartPie","style","cursor","labels","datasets","backgroundColor","hoverBackgroundColor","CChartPolarArea","CChartDoughnut","CChartBar","CChartLine","borderColor","pointBackgroundColor","pointBorderColor","height","overflowY","Weeklybatches","Monthlyevents"],"sourceRoot":""}