{"version":3,"file":"static/js/7835.c86adc7f.chunk.js","mappings":"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","sources":["views/settings/emailtemplate/createemailtemplate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from \"yup\";\nimport { useNavigate } from 'react-router';\nimport { useParams } from 'react-router-dom';\nimport { Button, FormGroup, Label, Input, Card, CardFooter, CardBody, Col, Row, CardImg } from 'reactstrap';\nimport './emailtemplate.css';\nimport Axios from \"../../../hoc/axiosConfig\";\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport emailtemplateImage from \"../../../assets/images/avatars/emailtemplate.jpg\"\nconst emailTemplte = { templateName: '', templateSubject: \"\", emailBody: \"\",emailType:\"\",emailTypeOptions:\"\",attachmentName:\"\" };\nconst createemailtemplate = () => {\n  const [templateValues, setState] = useState(emailTemplte);\n  const {templateName, templateSubject, emailBody,emailType,emailTypeOptions,attachmentName}=templateValues\n  const params = useParams();\n  const navigate = useNavigate();\n  const TemplateSchema = () => Yup.object().shape({\n    templateName: Yup.string().min(2, 'Too Short!').required('Template name Required'),\n    templateSubject: Yup.string().min(2, 'Too Short!').required('Template subject Required'),\n    emailBody: Yup.string().min(2, 'Too Short!').required('Email body Required'),\n    emailType: Yup.object().required('Email type Required'),\n  });\n  useEffect(() => {\n    if (params.id !== \"new\") {\n      Axios.get(`email-template/${params.id}`).then((res) => {\n        setState((prevState)=>({\n          ...prevState,\n          templateName: res.data.name, templateSubject: res.data.subject, emailBody: res.data.emailBody,\n          emailType:{ value: res.data.emailType.id, label: res.data.emailType.name },\n          attachmentName:res.data.attachment,\n\n        })) \n      }).catch((err) => { \n        Swal.fire( err.response.data.message, 'Please try again '  ) \n      })\n    }\n    emailTypesDropdown();\n  }, []);\n  const emailTypesDropdown = () => {\n    Axios.get(`email-types`).then((res) => {\n      let typesArray = [];\n      res.data.map((key, index) => {\n        typesArray.push({ value: key.id, label: key.name });\n      })\n     setState((prevState)=>({\n        ...prevState,\n        emailTypeOptions:typesArray\n      })) \n    }).catch((err) => {\n      Swal.fire( err.response.data.message, 'Please try again '  ) \n     })\n  }\n  const templateSubmit = (values) => {\n    const payload = {\n      name      : values.templateName,\n      subject   : values.templateSubject,\n      emailBody : values.emailBody,\n      attachment: attachmentName\n    }\n    if (params.id !== \"new\") {\n      Axios.put(`email-type/${values.emailType.value}/email-template/${params.id}`, payload).then((res) => {\n        if (res.status === 200) {\n          toast.info(\"Email-Template updated successfully\", { theme: \"colored\" });\n          setTimeout(() => {\n            navigate('/settings/allemailtemplates');\n          }, 2000);\n        }\n      }).catch((err) => {\n        Swal.fire( err.response.data.message, 'Please try again '  ) \n       })\n    }\n    else {\n      axios.defaults.headers.common['Authorization'] = \"Bearer \" + localStorage.getItem(\"token\");\n      axios.post(`${process.env.REACT_APP_BASE_URL}/email-type/${values.emailType.value}/email-template`, payload).then((res) => {\n        if (res.status === 201) {\n          toast.success(\"Email-Template created successfully\", { theme: \"colored\" });\n          setTimeout(() => {\n            navigate('/settings/allemailtemplates');\n          }, 2000);\n        }\n      }).catch((err) => {\n        if (err.response.status === 401) {\n          Swal.fire('401 session expired..!', 'Please re-login');\n        }\n        else {\n          Swal.fire(err.response.data.message,'Please try again later');\n        }\n      })\n    }\n  }\n  const attachmentHandleChange =(e)=>{\n    let file =URL.createObjectURL(e.target.files[0]);\n      let formdata = new FormData();\n    formdata.append('image', e.target.files[0]);\n     axios.defaults.headers.common['Authorization'] =  \"Bearer \" + localStorage.getItem(\"token\");\n    axios.post(`${process.env.REACT_APP_BASE_URL}/email-template/image/upload`,formdata).then((res)=>{\n       setState((prevState)=>({\n        ...prevState,\n        attachmentName:res.data.imageName\n      })) \n    }).catch(err=>{\n      Swal.fire( err.response.data.message, 'Please try again '  ) \n    })  \n  }\n  const fieldHandleChange = (data)=>{\n    setState((prevState)=>({\n      ...prevState,\n      [data.target.name]:data.target.value\n    })) \n  }\n  const selectFieldHandleChange=(name,e)=>{\n    setState((prevState)=>({\n     ...prevState,\n     [name]:e\n   })) \n  }\n  return (\n    <>\n      <ToastContainer />\n      <Card >\n        <CardBody className='cardbg'>\n          <h5><strong>{params.id === \"new\" ? \"Create\" : \"Update\"} Email Template</strong></h5>\n          <Card  >\n            <Row>\n              <Col md={6}>\n                <Card className='cardbgw'>\n                  <Formik\n                    enableReinitialize=\"true\"\n                    initialValues={templateValues}\n                    validationSchema={TemplateSchema}\n                    onSubmit={templateSubmit}\n                  >\n                    {({ values, handleChange, handleSubmit, errors, touched, handleBlur, isValid, dirty, setFieldValue }) => (\n                      <Form className=\"add-edit-user-form\" onSubmit={handleSubmit}>\n                        <CardBody className='cardbgw'>\n                          <Row>\n                            <Col md={6}>\n                              <Label for=\"templateName\">Name <span className=\"required\">*</span></Label>\n                              <Input\n                                type=\"text\"\n                                name=\"templateName\"\n                                value={values.templateName}\n                                id=\"templateName\"\n                                placeholder=\"Template name \"\n                                onChange={(handleChange,fieldHandleChange)}\n                                onBlur={handleBlur}\n                                className={errors.templateName && touched.templateName ? \"input-error\" : null}\n                                bsSize=\"lg\" />\n                              <ErrorMessage name=\"templateName\" component=\"div\" className='errmsg'></ErrorMessage>\n                            </Col>\n                            <Col md={6}>\n                              <Label for=\"emailType\">Email Type <span className=\"required\">*</span></Label>\n                              <Select\n                                name=\"emailType\"\n                                value={values.emailType}\n                                options={emailTypeOptions}\n                                onChange={(e)=>{setFieldValue(\"emailType\",e),selectFieldHandleChange(\"emailType\",e)}}\n                              />\n                              <ErrorMessage name=\"emailType\" component=\"div\" className='errmsg'></ErrorMessage>\n                            </Col>\n                          </Row>\n                          <Row>\n                            <FormGroup>\n                              <Label for=\"templateSubject\">Subject<span className=\"required\">*</span></Label>\n                              <Input\n                                type=\"text\"\n                                name=\"templateSubject\"\n                                value={values.templateSubject}\n                                id=\"templateSubject\"\n                                placeholder=\"Subject\"\n                                onChange={(handleChange,fieldHandleChange)}\n                                onBlur={handleBlur}\n                                bsSize=\"lg\" />\n                              <ErrorMessage name=\"templateSubject\" component=\"div\" className='errmsg'></ErrorMessage>\n                            </FormGroup>\n                          </Row>\n                          <Row>\n                            <FormGroup>\n                              <Label for=\"emailBody\">Body<span className=\"required\">*</span></Label>\n                              <Input\n                                type=\"textarea\"\n                                name=\"emailBody\"\n                                value={values.emailBody}\n                                id=\"emailBody\"\n                                placeholder='Body content here...'\n                                onChange={(handleChange,fieldHandleChange)}\n                                onBlur={handleBlur}\n                                rows=\"6\" />\n                              <ErrorMessage name=\"emailBody\" component=\"div\" className='errmsg'></ErrorMessage>\n                            </FormGroup>\n                          </Row>\n                          <Row>\n                            <FormGroup>\n                              <Label for=\"templateFile\">Attachment</Label>\n                              <Input\n                                type=\"file\"\n                                name=\"templateFile\"\n                                value={values.templateFile}\n                                onChange={(handleChange,attachmentHandleChange)}\n                                id=\"templateFile\" />\n                            </FormGroup>\n                          </Row>\n                        </CardBody>\n                        <CardFooter id='cardfootercolor'>\n                          <Button  size=\"md\" color='secondary' type=\"button\" className='btncncl' id=\"cancelbutton\" onClick={() => navigate(-1)}>Cancel</Button>{' '}\n                          <Button  color=\"primary\" size='md' id=\"savebutton\" className='btnsave' type=\"submit\">{params.id === \"new\" ? \"Save\" : \"Update\"}</Button>{' '}\n                        </CardFooter>\n                      </Form>\n                    )}\n                  </Formik>\n                </Card>\n              </Col>\n              <Col md={6}>\n                <CardImg\n                  alt=\"Card image cap\"\n                  src={emailtemplateImage}\n                  bottom\n                />\n              </Col>\n            </Row>\n          </Card>\n        </CardBody>\n      </Card>\n    </>\n  );\n}\nexport default createemailtemplate"],"names":["emailTemplte","templateName","templateSubject","emailBody","emailType","emailTypeOptions","attachmentName","_useState","useState","_useState2","_slicedToArray","templateValues","setState","params","useParams","navigate","useNavigate","useEffect","id","Axios","concat","then","res","prevState","_objectSpread","data","name","subject","value","label","attachment","catch","err","Swal","response","message","emailTypesDropdown","typesArray","map","key","index","push","attachmentHandleChange","e","URL","createObjectURL","target","files","formdata","FormData","append","axios","localStorage","getItem","process","imageName","fieldHandleChange","_defineProperty","_jsxs","_Fragment","children","_jsx","ToastContainer","Card","CardBody","className","Row","Col","md","Formik","enableReinitialize","initialValues","validationSchema","Yup","shape","min","required","onSubmit","values","payload","status","toast","theme","setTimeout","_ref","handleSubmit","handleChange","errors","touched","handleBlur","setFieldValue","isValid","dirty","Form","Label","for","Input","type","placeholder","onChange","onBlur","bsSize","ErrorMessage","component","Select","options","selectFieldHandleChange","FormGroup","rows","templateFile","CardFooter","Button","size","color","onClick","CardImg","alt","src","emailtemplateImage","bottom"],"sourceRoot":""}